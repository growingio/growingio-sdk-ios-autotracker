// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: event_v3.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum EventType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case visit // = 0
  case custom // = 1
  case visitorAttributes // = 2
  case loginUserAttributes // = 3
  case conversionVariables // = 4
  case appClosed // = 5
  case page // = 6
  case pageAttributes // = 7
  case viewClick // = 8
  case viewChange // = 9
  case formSubmit // = 10
  case activate // = 11
  case UNRECOGNIZED(Int)

  init() {
    self = .visit
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .visit
    case 1: self = .custom
    case 2: self = .visitorAttributes
    case 3: self = .loginUserAttributes
    case 4: self = .conversionVariables
    case 5: self = .appClosed
    case 6: self = .page
    case 7: self = .pageAttributes
    case 8: self = .viewClick
    case 9: self = .viewChange
    case 10: self = .formSubmit
    case 11: self = .activate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .visit: return 0
    case .custom: return 1
    case .visitorAttributes: return 2
    case .loginUserAttributes: return 3
    case .conversionVariables: return 4
    case .appClosed: return 5
    case .page: return 6
    case .pageAttributes: return 7
    case .viewClick: return 8
    case .viewChange: return 9
    case .formSubmit: return 10
    case .activate: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension EventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [EventType] = [
    .visit,
    .custom,
    .visitorAttributes,
    .loginUserAttributes,
    .conversionVariables,
    .appClosed,
    .page,
    .pageAttributes,
    .viewClick,
    .viewChange,
    .formSubmit,
    .activate,
  ]
}

#endif  // swift(>=4.2)

struct EventV3Dto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String {
    get {return _storage._deviceID}
    set {_uniqueStorage()._deviceID = newValue}
  }

  var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var gioID: String {
    get {return _storage._gioID}
    set {_uniqueStorage()._gioID = newValue}
  }

  var sessionID: String {
    get {return _storage._sessionID}
    set {_uniqueStorage()._sessionID = newValue}
  }

  var dataSourceID: String {
    get {return _storage._dataSourceID}
    set {_uniqueStorage()._dataSourceID = newValue}
  }

  var eventType: EventType {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  var platform: String {
    get {return _storage._platform}
    set {_uniqueStorage()._platform = newValue}
  }

  var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  var domain: String {
    get {return _storage._domain}
    set {_uniqueStorage()._domain = newValue}
  }

  ///PageEvent
  var path: String {
    get {return _storage._path}
    set {_uniqueStorage()._path = newValue}
  }

  ///HybridCustomEvent
  var query: String {
    get {return _storage._query}
    set {_uniqueStorage()._query = newValue}
  }

  ///PageEvent
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  ///PageEvent
  var referralPage: String {
    get {return _storage._referralPage}
    set {_uniqueStorage()._referralPage = newValue}
  }

  var globalSequenceID: Int64 {
    get {return _storage._globalSequenceID}
    set {_uniqueStorage()._globalSequenceID = newValue}
  }

  var eventSequenceID: Int32 {
    get {return _storage._eventSequenceID}
    set {_uniqueStorage()._eventSequenceID = newValue}
  }

  var screenHeight: Int32 {
    get {return _storage._screenHeight}
    set {_uniqueStorage()._screenHeight = newValue}
  }

  var screenWidth: Int32 {
    get {return _storage._screenWidth}
    set {_uniqueStorage()._screenWidth = newValue}
  }

  var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  var sdkVersion: String {
    get {return _storage._sdkVersion}
    set {_uniqueStorage()._sdkVersion = newValue}
  }

  var appVersion: String {
    get {return _storage._appVersion}
    set {_uniqueStorage()._appVersion = newValue}
  }

  ///VisitEvent
  var extraSdk: Dictionary<String,String> {
    get {return _storage._extraSdk}
    set {_uniqueStorage()._extraSdk = newValue}
  }

  ///customEvent
  var eventName: String {
    get {return _storage._eventName}
    set {_uniqueStorage()._eventName = newValue}
  }

  ///PageAttributesEvent
  var pageShowTimestamp: Int64 {
    get {return _storage._pageShowTimestamp}
    set {_uniqueStorage()._pageShowTimestamp = newValue}
  }

  ///BaseAttributesEvent
  var attributes: Dictionary<String,String> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  ///ResourceItemCustomEvent
  var resourceItem: ResourceItem {
    get {return _storage._resourceItem ?? ResourceItem()}
    set {_uniqueStorage()._resourceItem = newValue}
  }
  /// Returns true if `resourceItem` has been explicitly set.
  var hasResourceItem: Bool {return _storage._resourceItem != nil}
  /// Clears the value of `resourceItem`. Subsequent reads from it will return its default value.
  mutating func clearResourceItem() {_uniqueStorage()._resourceItem = nil}

  ///HybridPageEvent
  var protocolType: String {
    get {return _storage._protocolType}
    set {_uniqueStorage()._protocolType = newValue}
  }

  ///ViewElementEvent
  var textValue: String {
    get {return _storage._textValue}
    set {_uniqueStorage()._textValue = newValue}
  }

  ///ViewElementEvent
  var xpath: String {
    get {return _storage._xpath}
    set {_uniqueStorage()._xpath = newValue}
  }

  ///ViewElementEvent
  var index: Int32 {
    get {return _storage._index}
    set {_uniqueStorage()._index = newValue}
  }

  ///HybridViewElementEvent
  var hyperlink: String {
    get {return _storage._hyperlink}
    set {_uniqueStorage()._hyperlink = newValue}
  }

  var urlScheme: String {
    get {return _storage._urlScheme}
    set {_uniqueStorage()._urlScheme = newValue}
  }

  var appState: String {
    get {return _storage._appState}
    set {_uniqueStorage()._appState = newValue}
  }

  var networkState: String {
    get {return _storage._networkState}
    set {_uniqueStorage()._networkState = newValue}
  }

  var appChannel: String {
    get {return _storage._appChannel}
    set {_uniqueStorage()._appChannel = newValue}
  }

  /// useless
  var pageName: String {
    get {return _storage._pageName}
    set {_uniqueStorage()._pageName = newValue}
  }

  var platformVersion: String {
    get {return _storage._platformVersion}
    set {_uniqueStorage()._platformVersion = newValue}
  }

  var deviceBrand: String {
    get {return _storage._deviceBrand}
    set {_uniqueStorage()._deviceBrand = newValue}
  }

  var deviceModel: String {
    get {return _storage._deviceModel}
    set {_uniqueStorage()._deviceModel = newValue}
  }

  var deviceType: String {
    get {return _storage._deviceType}
    set {_uniqueStorage()._deviceType = newValue}
  }

  ///refer platformVersion
  var operatingSystem: String {
    get {return _storage._operatingSystem}
    set {_uniqueStorage()._operatingSystem = newValue}
  }

  var appName: String {
    get {return _storage._appName}
    set {_uniqueStorage()._appName = newValue}
  }

  var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  ///VISITEVENT
  var imei: String {
    get {return _storage._imei}
    set {_uniqueStorage()._imei = newValue}
  }

  ///VISITEVENT
  var androidID: String {
    get {return _storage._androidID}
    set {_uniqueStorage()._androidID = newValue}
  }

  ///VISITEVENT
  var oaid: String {
    get {return _storage._oaid}
    set {_uniqueStorage()._oaid = newValue}
  }

  ///VISITEVENT
  var googleAdvertisingID: String {
    get {return _storage._googleAdvertisingID}
    set {_uniqueStorage()._googleAdvertisingID = newValue}
  }

  ///for ios
  var idfa: String {
    get {return _storage._idfa}
    set {_uniqueStorage()._idfa = newValue}
  }

  ///for ios
  var idfv: String {
    get {return _storage._idfv}
    set {_uniqueStorage()._idfv = newValue}
  }

  ///PageEvent
  var orientation: String {
    get {return _storage._orientation}
    set {_uniqueStorage()._orientation = newValue}
  }

  var projectKey: String {
    get {return _storage._projectKey}
    set {_uniqueStorage()._projectKey = newValue}
  }

  var sendTime: Int64 {
    get {return _storage._sendTime}
    set {_uniqueStorage()._sendTime = newValue}
  }

  var userKey: String {
    get {return _storage._userKey}
    set {_uniqueStorage()._userKey = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ResourceItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var key: String = String()

  var attributes: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventV3List {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var values: [EventV3Dto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension EventType: @unchecked Sendable {}
extension EventV3Dto: @unchecked Sendable {}
extension ResourceItem: @unchecked Sendable {}
extension EventV3List: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension EventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VISIT"),
    1: .same(proto: "CUSTOM"),
    2: .same(proto: "VISITOR_ATTRIBUTES"),
    3: .same(proto: "LOGIN_USER_ATTRIBUTES"),
    4: .same(proto: "CONVERSION_VARIABLES"),
    5: .same(proto: "APP_CLOSED"),
    6: .same(proto: "PAGE"),
    7: .same(proto: "PAGE_ATTRIBUTES"),
    8: .same(proto: "VIEW_CLICK"),
    9: .same(proto: "VIEW_CHANGE"),
    10: .same(proto: "FORM_SUBMIT"),
    11: .same(proto: "ACTIVATE"),
  ]
}

extension EventV3Dto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EventV3Dto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "gio_id"),
    4: .standard(proto: "session_id"),
    5: .standard(proto: "data_source_id"),
    6: .standard(proto: "event_type"),
    7: .same(proto: "platform"),
    8: .same(proto: "timestamp"),
    9: .same(proto: "domain"),
    10: .same(proto: "path"),
    11: .same(proto: "query"),
    12: .same(proto: "title"),
    13: .standard(proto: "referral_page"),
    14: .standard(proto: "global_sequence_id"),
    15: .standard(proto: "event_sequence_id"),
    16: .standard(proto: "screen_height"),
    17: .standard(proto: "screen_width"),
    18: .same(proto: "language"),
    19: .standard(proto: "sdk_version"),
    20: .standard(proto: "app_version"),
    21: .standard(proto: "extra_sdk"),
    22: .standard(proto: "event_name"),
    23: .standard(proto: "page_show_timestamp"),
    24: .same(proto: "attributes"),
    25: .standard(proto: "resource_item"),
    26: .standard(proto: "protocol_type"),
    27: .standard(proto: "text_value"),
    28: .same(proto: "xpath"),
    29: .same(proto: "index"),
    30: .same(proto: "hyperlink"),
    31: .standard(proto: "url_scheme"),
    32: .standard(proto: "app_state"),
    33: .standard(proto: "network_state"),
    34: .standard(proto: "app_channel"),
    35: .standard(proto: "page_name"),
    36: .standard(proto: "platform_version"),
    37: .standard(proto: "device_brand"),
    38: .standard(proto: "device_model"),
    39: .standard(proto: "device_type"),
    40: .standard(proto: "operating_system"),
    42: .standard(proto: "app_name"),
    44: .same(proto: "latitude"),
    45: .same(proto: "longitude"),
    46: .same(proto: "imei"),
    47: .standard(proto: "android_id"),
    48: .same(proto: "oaid"),
    49: .standard(proto: "google_advertising_id"),
    50: .same(proto: "idfa"),
    51: .same(proto: "idfv"),
    52: .same(proto: "orientation"),
    53: .standard(proto: "project_key"),
    54: .standard(proto: "send_time"),
    55: .standard(proto: "user_key"),
  ]

  fileprivate class _StorageClass {
    var _deviceID: String = String()
    var _userID: String = String()
    var _gioID: String = String()
    var _sessionID: String = String()
    var _dataSourceID: String = String()
    var _eventType: EventType = .visit
    var _platform: String = String()
    var _timestamp: Int64 = 0
    var _domain: String = String()
    var _path: String = String()
    var _query: String = String()
    var _title: String = String()
    var _referralPage: String = String()
    var _globalSequenceID: Int64 = 0
    var _eventSequenceID: Int32 = 0
    var _screenHeight: Int32 = 0
    var _screenWidth: Int32 = 0
    var _language: String = String()
    var _sdkVersion: String = String()
    var _appVersion: String = String()
    var _extraSdk: Dictionary<String,String> = [:]
    var _eventName: String = String()
    var _pageShowTimestamp: Int64 = 0
    var _attributes: Dictionary<String,String> = [:]
    var _resourceItem: ResourceItem? = nil
    var _protocolType: String = String()
    var _textValue: String = String()
    var _xpath: String = String()
    var _index: Int32 = 0
    var _hyperlink: String = String()
    var _urlScheme: String = String()
    var _appState: String = String()
    var _networkState: String = String()
    var _appChannel: String = String()
    var _pageName: String = String()
    var _platformVersion: String = String()
    var _deviceBrand: String = String()
    var _deviceModel: String = String()
    var _deviceType: String = String()
    var _operatingSystem: String = String()
    var _appName: String = String()
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _imei: String = String()
    var _androidID: String = String()
    var _oaid: String = String()
    var _googleAdvertisingID: String = String()
    var _idfa: String = String()
    var _idfv: String = String()
    var _orientation: String = String()
    var _projectKey: String = String()
    var _sendTime: Int64 = 0
    var _userKey: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _deviceID = source._deviceID
      _userID = source._userID
      _gioID = source._gioID
      _sessionID = source._sessionID
      _dataSourceID = source._dataSourceID
      _eventType = source._eventType
      _platform = source._platform
      _timestamp = source._timestamp
      _domain = source._domain
      _path = source._path
      _query = source._query
      _title = source._title
      _referralPage = source._referralPage
      _globalSequenceID = source._globalSequenceID
      _eventSequenceID = source._eventSequenceID
      _screenHeight = source._screenHeight
      _screenWidth = source._screenWidth
      _language = source._language
      _sdkVersion = source._sdkVersion
      _appVersion = source._appVersion
      _extraSdk = source._extraSdk
      _eventName = source._eventName
      _pageShowTimestamp = source._pageShowTimestamp
      _attributes = source._attributes
      _resourceItem = source._resourceItem
      _protocolType = source._protocolType
      _textValue = source._textValue
      _xpath = source._xpath
      _index = source._index
      _hyperlink = source._hyperlink
      _urlScheme = source._urlScheme
      _appState = source._appState
      _networkState = source._networkState
      _appChannel = source._appChannel
      _pageName = source._pageName
      _platformVersion = source._platformVersion
      _deviceBrand = source._deviceBrand
      _deviceModel = source._deviceModel
      _deviceType = source._deviceType
      _operatingSystem = source._operatingSystem
      _appName = source._appName
      _latitude = source._latitude
      _longitude = source._longitude
      _imei = source._imei
      _androidID = source._androidID
      _oaid = source._oaid
      _googleAdvertisingID = source._googleAdvertisingID
      _idfa = source._idfa
      _idfv = source._idfv
      _orientation = source._orientation
      _projectKey = source._projectKey
      _sendTime = source._sendTime
      _userKey = source._userKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._deviceID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._gioID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._sessionID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._dataSourceID) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._platform) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._timestamp) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._domain) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._path) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._query) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._referralPage) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._globalSequenceID) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._eventSequenceID) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._screenHeight) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._screenWidth) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._language) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._sdkVersion) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._appVersion) }()
        case 21: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._extraSdk) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._eventName) }()
        case 23: try { try decoder.decodeSingularInt64Field(value: &_storage._pageShowTimestamp) }()
        case 24: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._attributes) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._resourceItem) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._protocolType) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._textValue) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._xpath) }()
        case 29: try { try decoder.decodeSingularInt32Field(value: &_storage._index) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._hyperlink) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._urlScheme) }()
        case 32: try { try decoder.decodeSingularStringField(value: &_storage._appState) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._networkState) }()
        case 34: try { try decoder.decodeSingularStringField(value: &_storage._appChannel) }()
        case 35: try { try decoder.decodeSingularStringField(value: &_storage._pageName) }()
        case 36: try { try decoder.decodeSingularStringField(value: &_storage._platformVersion) }()
        case 37: try { try decoder.decodeSingularStringField(value: &_storage._deviceBrand) }()
        case 38: try { try decoder.decodeSingularStringField(value: &_storage._deviceModel) }()
        case 39: try { try decoder.decodeSingularStringField(value: &_storage._deviceType) }()
        case 40: try { try decoder.decodeSingularStringField(value: &_storage._operatingSystem) }()
        case 42: try { try decoder.decodeSingularStringField(value: &_storage._appName) }()
        case 44: try { try decoder.decodeSingularDoubleField(value: &_storage._latitude) }()
        case 45: try { try decoder.decodeSingularDoubleField(value: &_storage._longitude) }()
        case 46: try { try decoder.decodeSingularStringField(value: &_storage._imei) }()
        case 47: try { try decoder.decodeSingularStringField(value: &_storage._androidID) }()
        case 48: try { try decoder.decodeSingularStringField(value: &_storage._oaid) }()
        case 49: try { try decoder.decodeSingularStringField(value: &_storage._googleAdvertisingID) }()
        case 50: try { try decoder.decodeSingularStringField(value: &_storage._idfa) }()
        case 51: try { try decoder.decodeSingularStringField(value: &_storage._idfv) }()
        case 52: try { try decoder.decodeSingularStringField(value: &_storage._orientation) }()
        case 53: try { try decoder.decodeSingularStringField(value: &_storage._projectKey) }()
        case 54: try { try decoder.decodeSingularInt64Field(value: &_storage._sendTime) }()
        case 55: try { try decoder.decodeSingularStringField(value: &_storage._userKey) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._deviceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deviceID, fieldNumber: 1)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 2)
      }
      if !_storage._gioID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gioID, fieldNumber: 3)
      }
      if !_storage._sessionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sessionID, fieldNumber: 4)
      }
      if !_storage._dataSourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dataSourceID, fieldNumber: 5)
      }
      if _storage._eventType != .visit {
        try visitor.visitSingularEnumField(value: _storage._eventType, fieldNumber: 6)
      }
      if !_storage._platform.isEmpty {
        try visitor.visitSingularStringField(value: _storage._platform, fieldNumber: 7)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 8)
      }
      if !_storage._domain.isEmpty {
        try visitor.visitSingularStringField(value: _storage._domain, fieldNumber: 9)
      }
      if !_storage._path.isEmpty {
        try visitor.visitSingularStringField(value: _storage._path, fieldNumber: 10)
      }
      if !_storage._query.isEmpty {
        try visitor.visitSingularStringField(value: _storage._query, fieldNumber: 11)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 12)
      }
      if !_storage._referralPage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._referralPage, fieldNumber: 13)
      }
      if _storage._globalSequenceID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._globalSequenceID, fieldNumber: 14)
      }
      if _storage._eventSequenceID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._eventSequenceID, fieldNumber: 15)
      }
      if _storage._screenHeight != 0 {
        try visitor.visitSingularInt32Field(value: _storage._screenHeight, fieldNumber: 16)
      }
      if _storage._screenWidth != 0 {
        try visitor.visitSingularInt32Field(value: _storage._screenWidth, fieldNumber: 17)
      }
      if !_storage._language.isEmpty {
        try visitor.visitSingularStringField(value: _storage._language, fieldNumber: 18)
      }
      if !_storage._sdkVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sdkVersion, fieldNumber: 19)
      }
      if !_storage._appVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appVersion, fieldNumber: 20)
      }
      if !_storage._extraSdk.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._extraSdk, fieldNumber: 21)
      }
      if !_storage._eventName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventName, fieldNumber: 22)
      }
      if _storage._pageShowTimestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._pageShowTimestamp, fieldNumber: 23)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._attributes, fieldNumber: 24)
      }
      try { if let v = _storage._resourceItem {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      if !_storage._protocolType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._protocolType, fieldNumber: 26)
      }
      if !_storage._textValue.isEmpty {
        try visitor.visitSingularStringField(value: _storage._textValue, fieldNumber: 27)
      }
      if !_storage._xpath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xpath, fieldNumber: 28)
      }
      if _storage._index != 0 {
        try visitor.visitSingularInt32Field(value: _storage._index, fieldNumber: 29)
      }
      if !_storage._hyperlink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hyperlink, fieldNumber: 30)
      }
      if !_storage._urlScheme.isEmpty {
        try visitor.visitSingularStringField(value: _storage._urlScheme, fieldNumber: 31)
      }
      if !_storage._appState.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appState, fieldNumber: 32)
      }
      if !_storage._networkState.isEmpty {
        try visitor.visitSingularStringField(value: _storage._networkState, fieldNumber: 33)
      }
      if !_storage._appChannel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appChannel, fieldNumber: 34)
      }
      if !_storage._pageName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pageName, fieldNumber: 35)
      }
      if !_storage._platformVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._platformVersion, fieldNumber: 36)
      }
      if !_storage._deviceBrand.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deviceBrand, fieldNumber: 37)
      }
      if !_storage._deviceModel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deviceModel, fieldNumber: 38)
      }
      if !_storage._deviceType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deviceType, fieldNumber: 39)
      }
      if !_storage._operatingSystem.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operatingSystem, fieldNumber: 40)
      }
      if !_storage._appName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appName, fieldNumber: 42)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 44)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 45)
      }
      if !_storage._imei.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imei, fieldNumber: 46)
      }
      if !_storage._androidID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._androidID, fieldNumber: 47)
      }
      if !_storage._oaid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._oaid, fieldNumber: 48)
      }
      if !_storage._googleAdvertisingID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._googleAdvertisingID, fieldNumber: 49)
      }
      if !_storage._idfa.isEmpty {
        try visitor.visitSingularStringField(value: _storage._idfa, fieldNumber: 50)
      }
      if !_storage._idfv.isEmpty {
        try visitor.visitSingularStringField(value: _storage._idfv, fieldNumber: 51)
      }
      if !_storage._orientation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orientation, fieldNumber: 52)
      }
      if !_storage._projectKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._projectKey, fieldNumber: 53)
      }
      if _storage._sendTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sendTime, fieldNumber: 54)
      }
      if !_storage._userKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userKey, fieldNumber: 55)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EventV3Dto, rhs: EventV3Dto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._deviceID != rhs_storage._deviceID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._gioID != rhs_storage._gioID {return false}
        if _storage._sessionID != rhs_storage._sessionID {return false}
        if _storage._dataSourceID != rhs_storage._dataSourceID {return false}
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._domain != rhs_storage._domain {return false}
        if _storage._path != rhs_storage._path {return false}
        if _storage._query != rhs_storage._query {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._referralPage != rhs_storage._referralPage {return false}
        if _storage._globalSequenceID != rhs_storage._globalSequenceID {return false}
        if _storage._eventSequenceID != rhs_storage._eventSequenceID {return false}
        if _storage._screenHeight != rhs_storage._screenHeight {return false}
        if _storage._screenWidth != rhs_storage._screenWidth {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._sdkVersion != rhs_storage._sdkVersion {return false}
        if _storage._appVersion != rhs_storage._appVersion {return false}
        if _storage._extraSdk != rhs_storage._extraSdk {return false}
        if _storage._eventName != rhs_storage._eventName {return false}
        if _storage._pageShowTimestamp != rhs_storage._pageShowTimestamp {return false}
        if _storage._attributes != rhs_storage._attributes {return false}
        if _storage._resourceItem != rhs_storage._resourceItem {return false}
        if _storage._protocolType != rhs_storage._protocolType {return false}
        if _storage._textValue != rhs_storage._textValue {return false}
        if _storage._xpath != rhs_storage._xpath {return false}
        if _storage._index != rhs_storage._index {return false}
        if _storage._hyperlink != rhs_storage._hyperlink {return false}
        if _storage._urlScheme != rhs_storage._urlScheme {return false}
        if _storage._appState != rhs_storage._appState {return false}
        if _storage._networkState != rhs_storage._networkState {return false}
        if _storage._appChannel != rhs_storage._appChannel {return false}
        if _storage._pageName != rhs_storage._pageName {return false}
        if _storage._platformVersion != rhs_storage._platformVersion {return false}
        if _storage._deviceBrand != rhs_storage._deviceBrand {return false}
        if _storage._deviceModel != rhs_storage._deviceModel {return false}
        if _storage._deviceType != rhs_storage._deviceType {return false}
        if _storage._operatingSystem != rhs_storage._operatingSystem {return false}
        if _storage._appName != rhs_storage._appName {return false}
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._imei != rhs_storage._imei {return false}
        if _storage._androidID != rhs_storage._androidID {return false}
        if _storage._oaid != rhs_storage._oaid {return false}
        if _storage._googleAdvertisingID != rhs_storage._googleAdvertisingID {return false}
        if _storage._idfa != rhs_storage._idfa {return false}
        if _storage._idfv != rhs_storage._idfv {return false}
        if _storage._orientation != rhs_storage._orientation {return false}
        if _storage._projectKey != rhs_storage._projectKey {return false}
        if _storage._sendTime != rhs_storage._sendTime {return false}
        if _storage._userKey != rhs_storage._userKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ResourceItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ResourceItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "attributes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.attributes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.attributes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.attributes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ResourceItem, rhs: ResourceItem) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.key != rhs.key {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventV3List: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EventV3List"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EventV3List, rhs: EventV3List) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
